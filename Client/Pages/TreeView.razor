@page "/treeview"
@using System.Reflection;
@using TreeViewProject.Shared;
@using YamlDotNet.Serialization;
@inject IJSRuntime JSRuntime


<h3>Tree View</h3>

<div>
    <TreeViewNode Nodes="@nodes" NodeText="@rootNodeText" IsSelected="@IsRootNodeSelected" NodeId = "@rootNodeId"/>
</div>


@code {
    private string selectedNodesJsonPath = "";
    private string selectedNodesXPath = "";
    private string rootNodeText = "Root";
    private int rootNodeId = 0;
    public bool IsRootNodeSelected { get; set; } = true;
    private List<TreeNode> nodes = new List<TreeNode>
    {
        new TreeNode(1, "Node 1", true , new List<TreeNode>
        {
            new TreeNode( 2, "Node 1.1" , true),
            new TreeNode(3 , "Node 1.2" , true),
        }),
        new TreeNode( 4 , "Node 2" , true),
        new TreeNode(5,"Node 3", true , new List<TreeNode>
        {
            new TreeNode(6,"Node 3.1" , true),
            new TreeNode(7,"Node 3.2" , true),
        }),
    };
    
   
    public async void downloadFile()
    {
        selectedNodesJsonPath = ConvertToJsonPath(nodes, "");
        //selectedNodesXPath = ConvertToXPath(nodes, "");

        var yamlData = new YamlData {Path = selectedNodesJsonPath};
        try
        {
            var yamlString = new SerializerBuilder().Build().Serialize(yamlData);
            string fileName = "data.yml";
            await JSRuntime.InvokeAsync<object>("saveFile", fileName, yamlString);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }


    private string ConvertToJsonPath(List<TreeNode> nodes, string path)
    {
        var jsonPathList = new List<string>();

        foreach (var node in nodes)
        {
            var nodePath = $"{path}.{node.NodeText}";

            // Recursively process child nodes
            if (node.ChildNodes.Count > 0)
            {
                var childJsonPath = ConvertToJsonPath(node.ChildNodes, nodePath);
                jsonPathList.Add(childJsonPath);
            }
            else
            {
                // Add the current node path to the list
                jsonPathList.Add(nodePath.TrimStart('.'));
            }
        }

        // Join all the JSON paths with a delimiter (e.g., '/')
        return string.Join("/", jsonPathList);
    }

    private string ConvertToXPath(List<TreeNode> nodes, string path)
    {
        var xPathList = new List<string>();

        foreach (var node in nodes)
        {
            var nodePath = $"{path}/{node.NodeText}";

            // Recursively process child nodes
            if (node.ChildNodes.Count > 0)
            {
                var childXPath = ConvertToXPath(node.ChildNodes, nodePath);
                xPathList.Add(childXPath);
            }
            else
            {
                // Add the current node path to the list
                xPathList.Add(nodePath.TrimStart('/'));
            }
        }

        // Join all the XPath expressions with a separator (e.g., '/')
        return string.Join("/", xPathList);
    }

}



